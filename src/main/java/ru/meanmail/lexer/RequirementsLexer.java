/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package ru.meanmail.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.ArrayDeque;
import java.util.Deque;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static ru.meanmail.psi.Types.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Requirements.flex</tt>
 */
public class RequirementsLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int WAITING_VERSION = 2;
    public static final int DQUOTE_STR = 4;
    public static final int SQUOTE_STR = 6;
    public static final int QUOTED_MARK = 8;
    public static final int URI = 10;
    public static final int REQ = 12;
    public static final int SHORT_OPTION_STATE = 14;
    public static final int LONG_OPTION_STATE = 16;
    public static final int BINARY = 18;
    public static final int WAITING_HASH = 20;
    public static final int WAITING_EQUAL = 22;
    public static final int WAITING_ALG = 24;
    public static final int WAITING_COLON = 26;
    public static final int WAITING_HASH_VALUE = 28;
    public static final int WAITING_IDENTIFIER = 30;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
            8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
    };

    /**
     * Translates characters to character classes
     * Chosen bits are [7, 7, 7]
     * Total runtime size is 1928 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch >> 14] | ((ch >> 7) & 0x7f)] << 7) | (ch & 0x7f)];
    }

    /* The ZZ_CMAP_Z table has 68 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
            "\1\0\103\200");

    /* The ZZ_CMAP_Y table has 256 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

    /* The ZZ_CMAP_A table has 640 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\11\35\1\0\1\30\2\31\1\30\22\35\1\0\1\12\1\64\1\15\1\14\1\16\1\26\1\65\1\37" +
                    "\1\40\1\3\1\1\1\6\1\2\1\21\1\17\12\33\1\4\1\5\1\36\1\25\1\36\1\7\1\13\6\66" +
                    "\24\32\1\10\1\20\1\11\1\63\1\22\1\63\1\57\1\71\1\61\1\67\1\50\1\54\1\32\1" +
                    "\44\1\53\1\32\1\72\1\56\1\60\1\46\1\45\1\41\1\70\1\51\1\52\1\43\1\55\1\47" +
                    "\1\32\1\62\1\42\1\32\1\23\1\34\1\24\1\27\6\35\1\31\32\35\1\0\337\35\1\0\177" +
                    "\35\13\0\35\35\2\31\5\35\1\0\57\35\1\0\40\35");

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\20\0\1\1\1\2\1\3\1\4\1\2\1\5\1\6" +
                    "\1\5\1\7\1\10\1\11\1\12\1\11\1\13\1\2" +
                    "\1\14\1\2\1\15\1\16\1\17\7\2\1\20\1\21" +
                    "\1\1\1\22\1\23\1\24\1\25\1\26\1\27\1\30" +
                    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40" +
                    "\1\41\1\42\1\43\1\44\1\1\1\2\1\45\1\46" +
                    "\1\2\1\47\1\50\1\2\1\51\1\52\1\53\1\54" +
                    "\1\55\1\56\1\57\13\2\1\51\1\2\1\60\1\61" +
                    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\0" +
                    "\1\15\2\0\1\71\4\0\1\72\2\0\1\73\1\52" +
                    "\25\0\1\74\3\0\1\75\1\76\41\0\1\77\3\0" +
                    "\1\100\17\0\1\101\21\0\1\102\30\0\1\103\20\0" +
                    "\1\104\37\0\1\105\2\0\1\106\10\0\1\107\10\0" +
                    "\1\110\7\0\1\111\2\0\1\112\13\0";

    private static int[] zzUnpackAction() {
        int[] result = new int[332];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d" +
                    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375" +
                    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u03eb\0\u03eb\0\u04d7" +
                    "\0\u0512\0\u054d\0\u0588\0\u03eb\0\u05c3\0\u03eb\0\u05fe\0\u0639" +
                    "\0\u0674\0\u05fe\0\u03eb\0\u03eb\0\u06af\0\u06ea\0\u0725\0\u0760" +
                    "\0\u079b\0\u07d6\0\u0811\0\u03eb\0\u03eb\0\u084c\0\u03eb\0\u03eb" +
                    "\0\u03eb\0\u03eb\0\u03eb\0\u03eb\0\u03eb\0\u03eb\0\u03eb\0\u03eb" +
                    "\0\u03eb\0\u03eb\0\u03eb\0\u03eb\0\u03eb\0\u03eb\0\u03eb\0\u03eb" +
                    "\0\u03eb\0\u0887\0\u08c2\0\u03eb\0\u03eb\0\u08fd\0\u03eb\0\u03eb" +
                    "\0\u0938\0\u0973\0\u08fd\0\u03eb\0\u03eb\0\u03eb\0\u03eb\0\u03eb" +
                    "\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b" +
                    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u03eb\0\u0cad\0\u03eb" +
                    "\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u03eb\0\u03eb\0\u04d7\0\u03eb" +
                    "\0\u0dd4\0\u0e0f\0\u03eb\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u03eb" +
                    "\0\u0f36\0\u0f71\0\u03eb\0\u03eb\0\u0fac\0\u0fe7\0\u1022\0\u105d" +
                    "\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235" +
                    "\0\u1270\0\u12ab\0\u0c37\0\u12e6\0\u0cad\0\u0d99\0\u1321\0\u135c" +
                    "\0\u1397\0\u03eb\0\u13d2\0\u140d\0\u1448\0\u03eb\0\u1483\0\u14be" +
                    "\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696" +
                    "\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e" +
                    "\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46" +
                    "\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e" +
                    "\0\u03eb\0\u1c59\0\u1c94\0\u1ccf\0\u03eb\0\u1d0a\0\u1d45\0\u1d80" +
                    "\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58" +
                    "\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u03eb\0\u207f\0\u20ba\0\u20f5" +
                    "\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd" +
                    "\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u03eb\0\u246a" +
                    "\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642" +
                    "\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a" +
                    "\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u03eb" +
                    "\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f" +
                    "\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67" +
                    "\0\u03eb\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04" +
                    "\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc" +
                    "\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4" +
                    "\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c" +
                    "\0\u03eb\0\u34c7\0\u3502\0\u03eb\0\u353d\0\u3578\0\u35b3\0\u35ee" +
                    "\0\u3629\0\u3664\0\u369f\0\u36da\0\u03eb\0\u3715\0\u3750\0\u378b" +
                    "\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2\0\u03eb\0\u38ed\0\u3928" +
                    "\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u03eb\0\u3a8a\0\u3ac5" +
                    "\0\u03eb\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62" +
                    "\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[332];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\21\1\22\1\23\12\22\1\24\2\22\1\25\1\26" +
                    "\6\22\1\27\1\21\2\30\1\27\4\22\22\30\3\22" +
                    "\5\30\1\21\3\31\6\22\1\31\2\22\1\32\2\22" +
                    "\1\25\2\31\5\22\1\27\1\21\2\31\1\27\4\22" +
                    "\22\31\3\22\5\31\20\33\1\25\7\33\1\27\4\33" +
                    "\1\22\26\33\1\34\6\33\20\35\1\25\7\35\1\27" +
                    "\4\35\1\22\27\35\1\36\5\35\1\21\11\22\1\37" +
                    "\2\22\1\40\2\22\1\25\4\22\1\41\1\22\1\37" +
                    "\1\27\1\21\2\22\1\27\1\22\1\42\1\43\1\44" +
                    "\1\45\3\22\1\46\1\47\1\22\1\50\1\22\1\51" +
                    "\1\52\3\22\1\53\4\22\1\54\1\55\5\22\1\56" +
                    "\1\57\1\60\1\61\1\62\2\61\1\63\1\64\1\65" +
                    "\1\61\1\66\1\67\1\70\1\71\1\72\1\25\1\73" +
                    "\1\74\1\75\1\76\2\61\1\77\1\27\1\56\1\100" +
                    "\1\101\1\27\2\22\2\61\22\100\2\22\1\61\5\100" +
                    "\1\102\1\22\1\103\2\22\1\104\1\105\1\22\1\64" +
                    "\1\65\1\106\1\107\4\22\1\25\1\110\3\22\1\111" +
                    "\1\22\1\106\1\27\1\102\2\112\1\27\1\22\1\113" +
                    "\1\43\1\44\22\112\3\22\5\112\1\21\17\22\1\25" +
                    "\7\22\1\27\1\21\2\22\1\27\13\22\1\114\1\115" +
                    "\1\22\1\116\1\117\4\22\1\120\11\22\1\21\17\22" +
                    "\1\25\7\22\1\27\1\21\2\22\1\27\4\22\1\121" +
                    "\1\22\1\122\1\22\1\123\1\124\1\22\1\125\1\126" +
                    "\1\22\1\127\1\130\1\131\3\22\1\132\11\22\1\21" +
                    "\3\22\1\133\1\22\1\105\11\22\1\25\7\22\1\27" +
                    "\1\21\2\134\1\27\4\22\22\134\3\22\5\134\1\21" +
                    "\17\22\1\25\7\22\1\27\1\21\2\22\1\27\7\22" +
                    "\1\135\26\22\1\21\17\22\1\25\4\22\1\136\2\22" +
                    "\1\27\1\21\2\22\1\27\36\22\1\21\17\22\1\25" +
                    "\7\22\1\27\1\21\2\137\1\27\4\22\22\137\3\22" +
                    "\5\137\1\21\3\22\1\140\13\22\1\25\7\22\1\27" +
                    "\1\21\2\22\1\27\36\22\1\141\14\22\1\142\2\22" +
                    "\1\25\7\22\1\27\1\141\1\22\1\143\1\27\13\22" +
                    "\1\143\3\22\1\143\2\22\1\143\1\22\1\143\4\22" +
                    "\2\143\1\22\1\143\1\22\1\21\17\22\1\25\7\22" +
                    "\1\27\1\21\2\144\1\27\4\22\22\144\3\22\5\144" +
                    "\1\21\30\0\1\21\136\0\1\145\70\0\30\24\2\0" +
                    "\41\24\30\0\1\146\3\0\1\146\40\0\1\147\16\0" +
                    "\2\147\7\0\2\30\5\0\22\30\3\0\5\30\1\0" +
                    "\3\31\6\0\1\31\6\0\2\31\7\0\2\31\5\0" +
                    "\22\31\3\0\5\31\30\32\2\0\41\32\20\33\1\0" +
                    "\7\33\1\0\4\33\1\0\26\33\1\0\6\33\20\35" +
                    "\1\0\7\35\1\0\4\35\1\0\27\35\1\0\5\35" +
                    "\25\0\1\150\45\0\30\40\2\0\41\40\25\0\1\42" +
                    "\107\0\1\151\13\0\1\152\65\0\1\153\1\154\65\0" +
                    "\1\155\107\0\1\156\52\0\1\157\76\0\1\160\11\0" +
                    "\1\161\60\0\1\162\24\0\1\56\4\0\1\104\7\0" +
                    "\1\40\13\0\1\56\41\0\1\102\14\0\1\40\13\0" +
                    "\1\102\43\0\1\163\115\0\1\164\72\0\1\113\46\0" +
                    "\1\110\1\165\1\0\1\110\12\0\1\110\1\0\2\165" +
                    "\7\0\2\112\5\0\22\112\3\0\5\112\51\0\1\166" +
                    "\72\0\1\167\67\0\1\170\71\0\1\171\107\0\1\172" +
                    "\4\0\1\173\53\0\1\174\70\0\1\175\77\0\1\176" +
                    "\71\0\1\177\65\0\1\200\73\0\1\201\10\0\1\202" +
                    "\15\0\1\203\16\0\2\203\7\0\2\134\5\0\22\134" +
                    "\3\0\5\134\57\0\1\204\15\0\1\205\16\0\2\205" +
                    "\7\0\2\137\5\0\22\137\3\0\5\137\1\141\30\0" +
                    "\1\141\41\0\30\142\2\0\41\142\33\0\1\143\14\0" +
                    "\1\143\3\0\1\143\2\0\1\143\1\0\1\143\4\0" +
                    "\2\143\1\0\1\143\3\0\1\206\16\0\2\206\7\0" +
                    "\2\144\5\0\22\144\3\0\5\144\43\0\1\207\106\0" +
                    "\1\210\35\0\1\211\113\0\1\212\72\0\1\213\101\0" +
                    "\1\214\61\0\1\215\120\0\1\216\5\0\1\165\16\0" +
                    "\2\165\7\0\2\112\5\0\22\112\3\0\5\112\50\0" +
                    "\1\217\77\0\1\220\73\0\1\221\16\0\1\222\133\0" +
                    "\1\223\102\0\1\224\107\0\1\225\71\0\1\226\51\0" +
                    "\1\227\74\0\1\230\70\0\1\231\71\0\1\232\103\0" +
                    "\1\233\66\0\1\234\64\0\1\235\71\0\1\236\75\0" +
                    "\1\237\75\0\1\240\43\0\1\241\126\0\1\242\70\0" +
                    "\1\243\70\0\1\244\62\0\1\245\103\0\1\246\15\0" +
                    "\1\247\52\0\1\250\64\0\1\251\104\0\1\252\65\0" +
                    "\1\253\111\0\1\254\5\0\1\255\142\0\1\256\66\0" +
                    "\1\257\102\0\1\260\60\0\1\261\73\0\1\262\101\0" +
                    "\1\263\75\0\1\264\72\0\1\265\54\0\1\266\101\0" +
                    "\1\267\72\0\1\270\65\0\1\271\31\0\1\272\136\0" +
                    "\1\273\77\0\1\274\76\0\1\275\72\0\1\276\66\0" +
                    "\1\277\101\0\1\300\12\0\1\301\144\0\1\302\61\0" +
                    "\1\303\77\0\1\304\26\0\1\305\134\0\1\306\71\0" +
                    "\1\307\105\0\1\310\70\0\1\311\74\0\1\312\63\0" +
                    "\1\313\71\0\1\314\113\0\1\315\70\0\1\316\51\0" +
                    "\1\317\26\0\1\320\161\0\1\321\52\0\1\322\23\0" +
                    "\1\323\146\0\1\324\64\0\1\325\73\0\1\326\25\0" +
                    "\1\327\110\0\1\330\121\0\1\331\71\0\1\265\101\0" +
                    "\1\332\63\0\1\333\24\0\1\334\157\0\1\335\56\0" +
                    "\1\336\67\0\1\337\101\0\1\340\66\0\1\341\75\0" +
                    "\1\342\64\0\1\343\77\0\1\344\70\0\1\345\76\0" +
                    "\1\346\72\0\1\347\62\0\1\350\4\0\1\351\76\0" +
                    "\1\352\55\0\1\353\75\0\1\354\115\0\1\355\3\0" +
                    "\1\356\136\0\1\357\106\0\1\360\61\0\1\361\67\0" +
                    "\1\362\74\0\1\114\24\0\1\363\55\0\1\364\63\0" +
                    "\1\365\67\0\1\366\67\0\1\367\102\0\1\370\67\0" +
                    "\1\371\77\0\1\372\37\0\1\373\124\0\1\374\61\0" +
                    "\1\375\102\0\1\376\63\0\1\377\105\0\1\u0100\55\0" +
                    "\1\u0101\117\0\1\u0102\47\0\1\u0103\76\0\1\u0104\100\0" +
                    "\1\116\106\0\1\u0105\55\0\1\u0106\63\0\1\u0107\75\0" +
                    "\1\u0108\77\0\1\u0109\55\0\1\u010a\5\0\1\350\1\0" +
                    "\1\u010b\1\u010c\5\0\1\u010d\57\0\1\u010e\104\0\1\u010f" +
                    "\61\0\1\u0110\71\0\1\u0111\76\0\1\u0112\71\0\1\u0113" +
                    "\101\0\1\u0114\61\0\1\u0115\76\0\1\117\71\0\1\u0116" +
                    "\64\0\1\120\101\0\1\u0117\76\0\1\u0118\56\0\1\u0119" +
                    "\100\0\1\u011a\64\0\1\u011b\107\0\1\u011c\64\0\1\u011d" +
                    "\64\0\1\u011e\106\0\1\u011f\65\0\1\u0120\62\0\1\u0121" +
                    "\112\0\1\u0122\62\0\1\u0123\63\0\1\115\77\0\1\u0124" +
                    "\75\0\1\u0125\41\0\1\u0126\113\0\1\u0127\105\0\1\u0128" +
                    "\66\0\1\u0129\101\0\1\u012a\71\0\1\265\65\0\1\u012b" +
                    "\70\0\1\u012c\64\0\1\u012d\31\0\1\u012e\134\0\1\u012f" +
                    "\73\0\1\u0130\74\0\1\350\67\0\1\u0131\76\0\1\u0132" +
                    "\65\0\1\u0133\73\0\1\u0134\73\0\1\u0135\67\0\1\u0136" +
                    "\105\0\1\u0137\65\0\1\u0138\70\0\1\265\71\0\1\u0139" +
                    "\104\0\1\u013a\63\0\1\u011d\75\0\1\u013b\65\0\1\u013c" +
                    "\75\0\1\u013d\73\0\1\u013e\66\0\1\u013f\76\0\1\310" +
                    "\66\0\1\310\46\0\1\u0140\126\0\1\u0141\36\0\1\u0142" +
                    "\116\0\1\237\1\350\76\0\1\u0143\77\0\1\u0144\53\0" +
                    "\1\u0145\107\0\1\u0146\64\0\1\u0147\102\0\1\u0148\62\0" +
                    "\1\u0149\70\0\1\u014a\67\0\1\u014b\106\0\1\u014c\56\0" +
                    "\1\u0117\27\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[15753];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\20\0\1\1\1\11\3\1\2\11\4\1\1\11\1\1" +
                    "\1\11\4\1\2\11\7\1\2\11\1\1\23\11\2\1" +
                    "\2\11\1\1\2\11\3\1\5\11\15\1\1\11\1\1" +
                    "\1\11\4\1\2\11\1\0\1\11\2\0\1\11\4\0" +
                    "\1\11\2\0\2\11\25\0\1\11\3\0\1\11\1\1" +
                    "\41\0\1\11\3\0\1\11\17\0\1\11\21\0\1\11" +
                    "\30\0\1\11\20\0\1\11\37\0\1\11\2\0\1\11" +
                    "\10\0\1\11\10\0\1\11\7\0\1\11\2\0\1\11" +
                    "\13\0";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[332];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    public RequirementsLexer() {
        this((java.io.Reader) null);
    }

    Deque<Integer> stack = new ArrayDeque<Integer>();

    public final void yypush(int newState) {
        yybegin(newState);
        stack.push(newState);
    }

    public final int yypop() {
        if (stack.size() == 0) {
            yyinitial();
            return YYINITIAL;
        }

        int state = stack.pop();

        if (stack.peek() == null) {
            yyinitial();
        } else {
            yybegin(stack.peek());
        }

        return state;
    }

    public final void yyinitial() {
        stack.clear();
        yypush(YYINITIAL);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public RequirementsLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true;

        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 75:
                        break;
                    case 2: {
                        yyinitial();
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 76:
                        break;
                    case 3: {
                        yypush(SHORT_OPTION_STATE);
                        return SHORT_OPTION;
                    }
                    // fall through
                    case 77:
                        break;
                    case 4: {
                        return COMMENT;
                    }
                    // fall through
                    case 78:
                        break;
                    case 5: {
                        yypush(REQ);
                        yypushback(yylength());
                    }
                    // fall through
                    case 79:
                        break;
                    case 6: {
                        yyinitial();
                        return EOL;
                    }
                    // fall through
                    case 80:
                        break;
                    case 7: {
                        yypop();
                        return VERSION;
                    }
                    // fall through
                    case 81:
                        break;
                    case 8: {
                        yypop();
                        return COMMENT;
                    }
                    // fall through
                    case 82:
                        break;
                    case 9: {
                        return PYTHON_STR_C;
                    }
                    // fall through
                    case 83:
                        break;
                    case 10: {
                        yypop();
                        return DQUOTE;
                    }
                    // fall through
                    case 84:
                        break;
                    case 11: {
                        yypop();
                        return SQUOTE;
                    }
                    // fall through
                    case 85:
                        break;
                    case 12: {
                        yyinitial();
                        return COMMENT;
                    }
                    // fall through
                    case 86:
                        break;
                    case 13: {
                        return VERSION_CMP;
                    }
                    // fall through
                    case 87:
                        break;
                    case 14: {
                        return LPARENTHESIS;
                    }
                    // fall through
                    case 88:
                        break;
                    case 15: {
                        return RPARENTHESIS;
                    }
                    // fall through
                    case 89:
                        break;
                    case 16: {
                        yypush(DQUOTE_STR);
                        return DQUOTE;
                    }
                    // fall through
                    case 90:
                        break;
                    case 17: {
                        yypush(SQUOTE_STR);
                        return SQUOTE;
                    }
                    // fall through
                    case 91:
                        break;
                    case 18: {
                        return PLUS;
                    }
                    // fall through
                    case 92:
                        break;
                    case 19: {
                        return MINUS;
                    }
                    // fall through
                    case 93:
                        break;
                    case 20: {
                        return SUB_DELIMS;
                    }
                    // fall through
                    case 94:
                        break;
                    case 21: {
                        return COLON;
                    }
                    // fall through
                    case 95:
                        break;
                    case 22: {
                        return QUESTION_MARK;
                    }
                    // fall through
                    case 96:
                        break;
                    case 23: {
                        return LSBRACE;
                    }
                    // fall through
                    case 97:
                        break;
                    case 24: {
                        return RSBRACE;
                    }
                    // fall through
                    case 98:
                        break;
                    case 25: {
                        return AT;
                    }
                    // fall through
                    case 99:
                        break;
                    case 26: {
                        return DOLLAR_SIGN;
                    }
                    // fall through
                    case 100:
                        break;
                    case 27: {
                        return SHARP;
                    }
                    // fall through
                    case 101:
                        break;
                    case 28: {
                        return PERCENT_SIGN;
                    }
                    // fall through
                    case 102:
                        break;
                    case 29: {
                        return SLASH;
                    }
                    // fall through
                    case 103:
                        break;
                    case 30: {
                        return DOT;
                    }
                    // fall through
                    case 104:
                        break;
                    case 31: {
                        return UNDERSCORE;
                    }
                    // fall through
                    case 105:
                        break;
                    case 32: {
                        return LBRACE;
                    }
                    // fall through
                    case 106:
                        break;
                    case 33: {
                        return RBRACE;
                    }
                    // fall through
                    case 107:
                        break;
                    case 34: {
                        return TILDA;
                    }
                    // fall through
                    case 108:
                        break;
                    case 35: {
                        return LETTER;
                    }
                    // fall through
                    case 109:
                        break;
                    case 36: {
                        return DIGIT;
                    }
                    // fall through
                    case 110:
                        break;
                    case 37: {
                        yypush(QUOTED_MARK);
                        return SEMICOLON;
                    }
                    // fall through
                    case 111:
                        break;
                    case 38: {
                        return COMMA;
                    }
                    // fall through
                    case 112:
                        break;
                    case 39: {
                        yypush(URI);
                        return AT;
                    }
                    // fall through
                    case 113:
                        break;
                    case 40: {
                        yypush(URI);
                        yypushback(yylength());
                    }
                    // fall through
                    case 114:
                        break;
                    case 41: {
                        return IDENTIFIER;
                    }
                    // fall through
                    case 115:
                        break;
                    case 42: {
                        yypush(WAITING_VERSION);
                        return VERSION_CMP;
                    }
                    // fall through
                    case 116:
                        break;
                    case 43: {
                        yypush(URI);
                        return EDITABLE;
                    }
                    // fall through
                    case 117:
                        break;
                    case 44: {
                        yypush(URI);
                        return REFER;
                    }
                    // fall through
                    case 118:
                        break;
                    case 45: {
                        yypush(URI);
                        return INDEX_URL;
                    }
                    // fall through
                    case 119:
                        break;
                    case 46: {
                        yypush(URI);
                        return FIND_LINKS;
                    }
                    // fall through
                    case 120:
                        break;
                    case 47: {
                        yypush(URI);
                        return CONSTRAINT;
                    }
                    // fall through
                    case 121:
                        break;
                    case 48: {
                        yypush(WAITING_ALG);
                        return EQUAL;
                    }
                    // fall through
                    case 122:
                        break;
                    case 49: {
                        yypush(WAITING_COLON);
                        return IDENTIFIER;
                    }
                    // fall through
                    case 123:
                        break;
                    case 50: {
                        yypush(WAITING_HASH_VALUE);
                        return COLON;
                    }
                    // fall through
                    case 124:
                        break;
                    case 51: {
                        yypush(REQ);
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 125:
                        break;
                    case 52: {
                        yypush(REQ);
                        return COMMENT;
                    }
                    // fall through
                    case 126:
                        break;
                    case 53: {
                        yypush(REQ);
                        return HEX;
                    }
                    // fall through
                    case 127:
                        break;
                    case 54: {
                        yyinitial();
                        return IDENTIFIER;
                    }
                    // fall through
                    case 128:
                        break;
                    case 55: {
                        yypush(LONG_OPTION_STATE);
                        return LONG_OPTION;
                    }
                    // fall through
                    case 129:
                        break;
                    case 56: {
                    }
                    // fall through
                    case 130:
                        break;
                    case 57: {
                        return OR;
                    }
                    // fall through
                    case 131:
                        break;
                    case 58: {
                        return IN;
                    }
                    // fall through
                    case 132:
                        break;
                    case 59: {
                        yypush(WAITING_HASH);
                        return LONG_OPTION;
                    }
                    // fall through
                    case 133:
                        break;
                    case 60: {
                        return NOT;
                    }
                    // fall through
                    case 134:
                        break;
                    case 61: {
                        return AND;
                    }
                    // fall through
                    case 135:
                        break;
                    case 62: {
                        return PRE;
                    }
                    // fall through
                    case 136:
                        break;
                    case 63: {
                        yypush(WAITING_EQUAL);
                        return HASH;
                    }
                    // fall through
                    case 137:
                        break;
                    case 64: {
                        return ENV_VAR;
                    }
                    // fall through
                    case 138:
                        break;
                    case 65: {
                        return BINARY_ALL;
                    }
                    // fall through
                    case 139:
                        break;
                    case 66: {
                        return BINARY_NONE;
                    }
                    // fall through
                    case 140:
                        break;
                    case 67: {
                        return NO_INDEX;
                    }
                    // fall through
                    case 141:
                        break;
                    case 68: {
                        yypush(BINARY);
                        return NO_BINARY;
                    }
                    // fall through
                    case 142:
                        break;
                    case 69: {
                        yypush(BINARY);
                        return ONLY_BINARY;
                    }
                    // fall through
                    case 143:
                        break;
                    case 70: {
                        yypush(WAITING_IDENTIFIER);
                        return USE_FEATURE;
                    }
                    // fall through
                    case 144:
                        break;
                    case 71: {
                        yypush(URI);
                        return TRUSTED_HOST;
                    }
                    // fall through
                    case 145:
                        break;
                    case 72: {
                        return PREFER_BINARY;
                    }
                    // fall through
                    case 146:
                        break;
                    case 73: {
                        return REQUIRE_HASHES;
                    }
                    // fall through
                    case 147:
                        break;
                    case 74: {
                        yypush(URI);
                        return EXTRA_INDEX_URL;
                    }
                    // fall through
                    case 148:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
